

#define METROPOLIS_C

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "simulations.h"
#include "random.h"
#include "cluster.h"

#define DELTA 4.0


/* Cold initialization */
void cold_init(double *v, int dim)
{
	int i;
	for(i=0; i<dim; i++)
		v[i] = 0;
}


/* Hot initialization */
void hot_init(double *v, int dim)
{
	int i;
	double *temp;
	temp = malloc(dim*sizeof(double));
	ranlxd(temp,dim);
	for(i=0; i<dim; i++)
		v[i] = 50.0*(2*temp[i] - 1);
	
	free(temp);
}



/* Autocorrelation of data in an array */
void autocorrelation(double *x, int t, double *v, int dim, int steps)
{
	int i;
	double *temp1, *temp2, *temp3;
	temp1 = malloc(dim*sizeof(double));
	temp2 = malloc(dim*sizeof(double));
	temp3 = malloc(dim*sizeof(double));
	cold_init(temp1, dim);
	cold_init(temp2, dim);
	cold_init(temp3, dim);
	
	for(i=0; (i+dim*t)<(steps*dim); i++)
	{
		temp3[i%dim] += x[i]*x[i+t*dim]/(double)(steps - t);
		temp1[i%dim] += x[i]/(double)(steps - t);
		temp2[i%dim] += x[i]*x[i]/(double)(steps - t);
	}
	for(i=0; i<dim; i++)
		v[i] = (temp3[i] - temp1[i]*temp1[i])/(temp2[i] - temp1[i]*temp1[i]);
	
	free(temp1);
	free(temp2);
	free(temp3);
}


/* Routine that executes a sweep of the Metropolis algorithm */
void metropolis (double (*P)(double *), double *state, int state_dim, double delta)
{
	double swap, x_new, acceptance;
	double u[2];

	for(i=0; i<state_dim; i++)
	{
		ranlxd(u,2);
		x_new = state[i] + delta*(u[0] - 0.5);
		swap = state[i];
		state[i] = x_new;
			acceptance = P(state);
		state[i] = swap;
			acceptance /= P(state);
		
		if(acceptance >= u[1])
			state[i] = x_new;
	}
}

